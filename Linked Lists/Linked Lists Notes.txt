Linked Lists

- have a head and a tail
- can't go backwards in a linked list
- each node has a .next
    - last node points to null
        - called a null terminated list
- nodes in a linked lists can be anywhere in memory, not necessarily contiguous
- a node includes the value and pointer, it is an object
    - ex. {value: 4, next: null}

Big O
- adding a new item at the end: 
    - O(1), constant time
- removing item at the end:
    - O(n), have to start at head and iterate through entire list

- adding item at the start: 
    - O(1), just need to point new node to head and move head to new node
- removing item at the start:
    - O(1), set head = head.next, set start.node = null

- inserting into middle: 
    - O(n), set newNode.next = node.next, set node.next = newNode
- removing from middle:
    - O(n), set prev.next = node.next, set node.next = null

- finding an item by index or value:
    - always O(n)