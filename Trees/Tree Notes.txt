Binary tree node
- has value, left, and right
- left and right start as null

Full Tree 
- every item points to either 2 nodes or 0 nodes 

Perfect Tree 
- every line is completely filled all the way across 
- a perfect tree will always be full and complete 

Complete Tree 
- the tree is as compact as it can be with the number of nodes in the tree 
- can be complete without being full or perfect 


- top node is parent node 
- everything below is a child node 
- adjacent nodes are siblings 
- every node has only 1 parent 
- a node that has no children is called a leaf 



Binary Search Tree 
- when adding new value into tree, if greater than a node, it goes to the right, if less, it goes to the left 

BST Big O 
- finding, inserting, and removing are all O(log n) (very efficient; divide and conquer) 
    - cutting the tree in half with every operation (when tree is complete) 
- worst possible scenario for a BST is O(n) if there are no forks in the tree (straight line of nodes) 
- best possible scenario is O(log n) 
- the result is usually somewhere between those two possiblities, so we treat BST as O(log n) 
    - lookup, insert, remove 

Linked List vs BST 
- lookup:
    - LL is O(n), BST is O(log n)
- remove: 
    - LL is O(n), BST is O(log n) 
- insert:
    - LL is O(1), BST is O(log n)